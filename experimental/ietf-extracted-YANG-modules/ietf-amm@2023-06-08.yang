module ietf-amm {
  namespace "ari:/ietf-amm";
  prefix "amm";
  amm:enum "0";

  organization
    "IETF Delay Tolerant Networking Working Group";
  contact
    "WG Web: <http://tools.ietf.org/wg/dtn/>
    WG List: <mailto:dtn@ietf.org>

    WG Chairs: Brian Haberman
               <mailto:brian@innovationslab.net>
               Marc Blanchet
               <mailto:Marc.Blanchet@viagenie.ca>

    Editor: Brian Sipos
            <mailto:brian.sipos@jhuapl.edu>";

  description
    "This module implements the DTN Management Architecture (DTNMA)
    Application Data Model (ADM) base module within YANG";
  reference
    "draft-birrane-dtn-adm";

  revision "2023-06-08" {
    description "Updated for latest AMM contents.";
    reference "draft-birrane-dtn-adm";
  }
  revision "2016-04-01" {
    description "Updated to fix typos.";
    reference "draft-bsipos-dtn-amp-yang";
  }
  revision "2016-03-14" {
    description "Initial draft release.";
    reference "draft-bsipos-dtn-amp-yang";
  }

  /****
   * This section contains extension for AMM object definitions
   ****/

  // This group of extensions are for common behavior for AMM objects
  extension enum {
    argument "value";
    description
      "An enumeration identifies an object within a namespace.
      The argument to this statement is the integer value.";
  }
  extension parameters {
    description
      "A container for the formal parameters for an object.
      Each substatement is a parameter as either a leaf (ARI)
      or container (AC).
      Order of parameters is signifigant within this statement.";
  }

  // This group are AMM object keywords and their parameters
  extension const {
    argument "name";
    description
      "Definition of a CONST within an ADM.
      The argument to this statement is the object name.
      A 'value' substatement must be present.";
  }
  extension value {
    argument "ari";
    description
      "The literal value of a CONST object.
      The argument is the text form of the ARI";
  }

  extension ctrl {
    argument "name";
    description
      "Definition of a CTRL within an ADM.
      The argument to this statement is the object name.";
  }
  extension result {
    description
      "An result value reported as a response to a control.
      The substatement is the result value as either a leaf (ARI)
      or container (AC).
      Each CTRL can have a single optional result.";
  }

  extension edd {
    argument "name";
    description
      "Definition of an EDD within an ADM.
      The argument to this statement is the object name.";
  }

  extension oper {
    argument "name";
    description
      "Definition of an OPER within an ADM.
      The argument to this statement is the object name.";
  }
  extension operands {
    description
      "An individual operand taken from the expression stack
      during evaluation of the OPER.
      Each substatement is an operand as a leaf (ARI).
      Order of operands is signifigant within an object definition.";
  }

  extension var {
    argument "name";
    description
      "Definition of a VAR within an ADM.
      The argument to this statement is the object name.";
  }
  extension init {
    argument "expr";
    description "An EXPR value used to initialize a VAR.";
  }

  /****
   * This section contains ARI (literal and object-reference) value types.
   ****/

  extension int-labels {
    description
      "Type narrowing for an INTEGER to label enum values or bit positions.";
  }
  extension cddl {
    argument "text";
    description
      "Type narrowing for a CBOR item in the form of CDDL syntax.
      The argument to this statement is the actual CDDL text.";
  }

  // Simple literal types as YANG typedefs
  typedef NULL {
    type enumeration {
      enum null {
        description "The only allowed value.";
      }
    }
    description
      "A single-valued type to represent a null value.";
  }
  typedef BOOL {
    type boolean;
    description
      "The same semantics as the YANG 'boolean' type.";
  }
  typedef BYTE {
    type uint8;
    description
      "The same semantics as the YANG 8-bit unsigned type.";
  }
  typedef UINT {
    type uint32;
    description
      "The same semantics as the YANG 32-bit unsigned type.
      Can contain an 'int-labels' substatement for documentation.";
  }
  typedef INT {
    type int32;
    description
      "The same semantics as the YANG 32-bit signed type.
      Can contain an 'int-labels' substatement for documentation.";
  }
  typedef UVAST {
    type uint64;
    description
      "The same semantics as the YANG 64-bit unsigned type.
      Can contain an 'int-labels' substatement for documentation.";
  }
  typedef VAST {
    type int64;
    description
      "The same semantics as the YANG 64-bit signed type.
      Can contain an 'int-labels' substatement for documentation.";
  }
  typedef REAL32 {
    type decimal64 {
      fraction-digits 10;
    }
    description
      "An IEEE-754 float32 value with a text representation in YANG.
      The ARI representation is different than the YANG type used here.
      Allows range restriction.";
  }
  typedef REAL64 {
    type decimal64 {
      fraction-digits 10;
    }
    description
      "An IEEE-754 float64 value with a text representation in YANG.
      The ARI representation is different than the YANG type used here.
      Allows range restriction.";
  }
  typedef TEXTSTR {
    type string;
    description
      "The same semantics as the YANG 'string' type.
      Allows length and pattern restriction.";
  }
  typedef BYTESTR {
    type binary;
    description
      "The same semantics as the YANG 'binary' type.
      Allows length restriction.";
  }
  typedef TP {
    type string;
    description
      "An absolute instant in time.
      The ARI representation is different than the YANG type used here.
      This is represented as either (narrowed RFC 3339) text or
      (fractional) seconds from the DTN epoch.";
  }
  typedef TD {
    type string;
    description
      "A relative time as a difference between two time instants.
      The ARI representation is different than the YANG type used here.
      This is represented as either (narrowed RFC 3339) text or
      (fractional) seconds.";
  }
  typedef LITTYPE {
    type string;
    description
      "An enumeration from IANA table of literal types.";
  }
  typedef LABEL {
    type string {
      pattern "[a-zA-Z_][a-zA-Z0-9_\\-\\.]*";
    }
    description
      "An identifier label which fits the YANG 'identifier' pattern.";
  }
  typedef CBOR {
    type BYTESTR;
    description
      "A bytestr which contains a single well-formed CBOR item.
      Can contain a 'cddl' substatement for documentation.";
  }

  // Complex literals
  typedef AC {
    type string;
    description
      "When present within an ADM this uses the text encoding of an ARI Collection (AC).";
  }
  typedef AM {
    type string;
    description
      "When present within an ADM this uses the text encoding of an ARI Map (AM).";
  }

  // Object references
  typedef OBJ-REF {
    type string;
    description
      "A text representation of an ARI containing an object reference.";
  }
  typedef TYPEDEF-REF {
    type OBJ-REF;
    description "A reference to a TYPEDEF object.";
  }
  typedef CONST-REF {
    type OBJ-REF;
    description "A reference to a CONST object.";
  }
  typedef CTRL-REF {
    type OBJ-REF;
    description "A reference to a CTRL object.";
  }
  typedef EDD-REF {
    type OBJ-REF;
    description "A reference to an EDD object.";
  }
  typedef OPER-REF {
    type OBJ-REF;
    description "A reference to a OPER object.";
  }
  typedef SBR-REF {
    type OBJ-REF;
    description "A reference to an SBR object.";
  }
  typedef TBR-REF {
    type OBJ-REF;
    description "A reference to a TBR object.";
  }
  typedef VAR-REF {
    type OBJ-REF;
    description "A reference to a VAR object.";
  }

  // Named type unions for literals
  typedef TYPE-REF {
    type union {
      type LITTYPE;
      type TYPEDEF-REF;
    }
    description
      "Reference to either a literal type or a typedef.";
  }
  typedef INTEGER {
    type union {
      type BYTE;
      type UINT;
      type INT;
      type UVAST;
      type VAST;
    }
    description
      "Any type which represents a discrete integer.";
  }
  typedef FLOAT {
    type union {
      type REAL32;
      type REAL64;
    }
    description
      "Any type which represents a floating point number.";
  }
  typedef NUMERIC {
    type union {
      type INTEGER;
      type FLOAT;
    }
    description
      "Any type which can be used with numeric expressions.";
  }
  typedef TIME {
    type union {
      type TP;
      type TD;
    }
    description
      "Any type which can be used with time expressions.";
  }
  typedef SIMPLE {
    type union {
      type NULL;
      type BOOL;
      type NUMERIC;
      type TEXTSTR;
      type BYTESTR;
      type TIME;
      type LABEL;
      type CBOR;
    }
    description
      "Any type which contains a single value usable within an expression.";
  }
  typedef COMPLEX {
    type union {
      type AC;
      type AM;
    }
    description
      "A literal type which is not SIMPLE.";
  }
  typedef LITERAL {
    type union {
      type TYPE-REF; //FIXME: is typeref a literal or something else?
      type SIMPLE;
      type COMPLEX;
    }
    description
      "Any type which is represented as a literal ARI.";
  }

  typedef ANY {
    type union {
      type LITERAL;
      type OBJ-REF;
    }
    description
      "Any type representable by an ARI.";
  }
  typedef VALUE-REF {
    type union {
      type CONST-REF;
      type EDD-REF;
      type VAR-REF;
    }
    description
      "A reference to an object which can produce a value.";
  }

  // operational semantic types
  typedef counter32 {
    type UINT;
    description
      "A 32-bit counter with an arbitrary initial value that only increments.
      When the value reaches the upper range it wraps around to zero.
      At least two samples of this value need to be compared over time.";
  }
  typedef counter64 {
    type UVAST;
    description
      "A 64-bit counter with an arbitrary initial value that only increments.
      When the value reaches the upper range it wraps around to zero.
      At least two samples of this value need to be compared over time.";
  }
  typedef gauge32 {
    type INT;
    description
      "A 32-bit value sampling some quantized measurement.
      The value can increase or decrease arbitrarily over time.";
  }
  typedef gauge64 {
    type VAST;
    description
      "A 64-bit value sampling some quantized measurement.
      The value can increase or decrease arbitrarily over time.";
  }
  typedef timestamp {
    type TP;
    description
      "A time point representing the system clock at which a specific
      occurrence happened.
      The specific occurrence must be defined in the description
      of any node defined using this type.";
  }

  // Restrictions on AC item types for specific purposes
  typedef EXPR-item {
    type union {
      type SIMPLE;
      type VALUE-REF;
      type TYPEDEF-REF;
      type OPER-REF;
    }
    description
      "Each item of an EXPR list.
      The value-object must be typed to contain a SIMPLE.";
  }
  grouping EXPR {
    leaf-list _ {
      type EXPR-item;
      description "All items are the same type.";
    }
    description "The contents of an EXPR container.";
  }
  typedef EXEC-REF {
    type union {
      type VALUE-REF;
      type CTRL-REF;
    }
    description
      "A reference to an object which can be executed.
      The value-object must be typed to contain a MAC.";
  }
  grouping MAC {
    leaf-list _ {
      type EXEC-REF;
      description "All items are the same type.";
    }
    description "The contents of a MAC container.";
  }

  grouping RPTT-item {
    choice item {
      case value-ref {
        leaf ref {
          type VALUE-REF;
          description "An object to produce a report value.";
        }
      }
      case expr {
        container expr {
          uses EXPR;
          description "An expression to evaluate into a report value.";
        }
      }
      description
        "Each item references a value-producing object or contains an
        expression to be evaluated.";
    }
    description
      "Each item of a RPTT.";
  }
  grouping RPTT {
    container _ {
      uses RPTT-item;
      description "The sequence of items in the template.";
    }
    description
      "The contents of a report template, encoded as the sequence of items.";
  }
  grouping RPT-items {
    leaf-list item {
      type ANY;
      description "The sequence of items in the report.";
    }
    description
      "The contents of a report, encoded as the sequence of values reported.
      The semantics of each item are contained in the associated RPTT.";
  }
  grouping TBL {
    leaf col-count {
      type UVAST;
      description "The number of columns in the table.";
    }
    leaf-list tbl-item {
      type ANY;
      description
        "All table values listed in row-major order.";
    }
    description
      "The flattened contents of a table.
      The semantics of each column are contained in the associated TBLT.";
  }
  grouping RPT {
    leaf source {
      type OBJ-REF;
      description "Reference to the reported object.";
    }
    leaf generated-at {
      type timestamp;
      description "The generation timestamp.";
    }
    choice entries {
      case value-ref {
        leaf value {
          type ANY;
        }
      }
      case rptt {
        uses RPT-items;
      }
      case tblt {
        uses TBL;
      }
      case ctrl-ref {
        leaf result {
          type ANY;
        }
      }
      description
        "Each report content depends on the reported object.";
    }
    description "The contents of an RPT container.";
  }
}
